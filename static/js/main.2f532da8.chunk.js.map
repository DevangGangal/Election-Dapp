{"version":3,"sources":["Navbar.js","Body.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","account","className","Body","candidate1","candidate2","votecandidate","useState","candidate","setCandidate","can","setCan","id","name","votecount","onSubmit","e","preventDefault","console","log","window","alert","onChange","target","value","document","getElementById","style","display","defaultValue","App","useEffect","loadWeb3","loadBlockchainData","currentAccount","setCurrentAccount","loader","setLoader","electionSM","setElectionSM","setCandidate1","setCandidate2","a","ethereum","web3","Web3","enable","currentProvider","eth","getAccounts","accounts","net","getId","networkId","networkData","Electionabi","networks","election","Contract","abi","methods","candidates","call","candidateId","Vote","send","from","on","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2f532da8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navbar = ({account}) => {\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar navbar-dark bg-dark shadow mb-5\">\r\n            <p className=\"navbar-brand my-auto\">Election dapp</p>\r\n            <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item text-white\">{account}</li>\r\n            </ul>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React , {useState} from \"react\";\r\nimport './App.css';\r\n\r\n\r\n\r\nconst Body = ({candidate1,candidate2,votecandidate,account}) => {\r\n    const[candidate,setCandidate] = useState(\"\");\r\n\r\n    // var can=0;\r\n    const[can,setCan] = useState();\r\n\r\n    \r\n    // console.log(\"candidate :\"+candidate);\r\n    //here we define a function onchange\r\n    const onchange = (e) => {\r\n        setCandidate(e.target.value);\r\n\r\n        \r\n        if(e.target.value == candidate1.name)\r\n        {\r\n            // can=candidate1.id;\r\n            setCan(candidate1.id);\r\n        }\r\n        else\r\n        {\r\n            // can=candidate2.id;\r\n            setCan(candidate2.id);\r\n        }\r\n        console.log(\"can :\"+can);\r\n\r\n        // console.log(\"e.target.value:\"+e.target.value);\r\n        // console.log(\"candidate:\"+candidate);\r\n\r\n        let hides=document.getElementById(\"hide\");\r\n        hides.style.display=\"block\";\r\n    };\r\n\r\n    //here we define a function onsubmit\r\n    const onsubmit = (e) => {\r\n        e.preventDefault();\r\n        // console.log(\"candidate\"+candidate);\r\n        // console.log(\"candidate.id\"+candidate.id);\r\n        if(candidate.id !== 0)\r\n        {\r\n            votecandidate(can);//Number(candidate)\r\n            console.log(\"can:\"+can);\r\n        }\r\n        else\r\n        {\r\n            window.alert(\"Error in Voting\");\r\n        }\r\n    }\r\n\r\n    \r\n    return(\r\n        <div>\r\n            <table className=\"table\">\r\n                <tbody>\r\n                    <tr><td><b>ID</b></td><td><b>Name</b></td><td><b>Vote Count</b></td></tr>\r\n                    <tr><td>{candidate1.id}</td><td>{candidate1.name}</td><td>{candidate1.votecount}</td></tr>\r\n                    <tr><td>{candidate2.id}</td><td>{candidate2.name}</td><td>{candidate2.votecount}</td></tr>\r\n                </tbody>\r\n            </table>\r\n            <span className=\"table\"><b>Cast Your Vote</b></span>\r\n            <form className=\"table\" id=\"select\" onSubmit={onsubmit}>\r\n                <select onChange={onchange}>\r\n                    <option defaultValue value=\"\">Select</option>\r\n                    <option>{candidate1.name}</option>\r\n                    <option>{candidate2.name}</option>\r\n                </select>\r\n                <button>Vote</button>\r\n                <span id=\"hide\">You're voting for <b>{candidate}</b></span>\r\n            </form>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Body","import React , {useEffect,useState} from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Electionabi from './contracts/Election.json';\nimport Web3 from 'web3';\nimport Navbar from './Navbar';\nimport Body from './Body';\nimport \"./App.css\";\n\nfunction App() {\n\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData();\n  },[])\n\n  const[currentAccount,setCurrentAccount] = useState(\"\");\n  const[loader,setLoader] = useState(true);\n  const[electionSM,setElectionSM] = useState();   /* SM means smart contract */\n  const[candidate1,setCandidate1] = useState();\n  const[candidate2,setCandidate2] = useState();\n\n  // loadweb3 is a part of boilerplate code.\n  const loadWeb3 = async() => {\n    if(window.ethereum)\n    {\n      window.web3 = new  Web3(window.ethereum);\n      await window.ethereum.enable();\n    }\n    else if(window.web3)\n    {\n      window.web3 = new Web3(window.web3.currentProvider);\n    }\n    else\n    {\n      window.alert(\"Metamask not detected\");\n    }\n  };\n\n  // loadblockchaindata is a boiler plate code\n  const loadBlockchainData = async ()=>{\n    setLoader(true);\n    const web3 = window.web3;\n\n    const accounts=await web3.eth.getAccounts();\n    console.log(\"accounts:-\"+accounts);\n    // const account = accounts[0];\n    setCurrentAccount(accounts[0]);\n\n    const networkId = await web3.eth.net.getId();\n\n    console.log(\"networkId:-\"+networkId);\n\n    const networkData = Electionabi.networks[networkId];/* networkData is returning undefined */\n\n    console.log(\"networkData:-\"+networkData);\n\n    var address=\"0x132a6bb33B592eb0B25fA43424994797880782B3\";\n    if(networkId == 5777)\n    {\n      const election = new web3.eth.Contract(Electionabi.abi,address); //here we are calling our contract \n      /* in brackets earlier was (Electionabi.abi,networkData.address) */\n      \n      const candidate1 = await election.methods.candidates(1).call(); //here we are calling candidates mapping from our smart contract\n      // const candidate1Id = candidate1.id;\n      // const candidate1Name = candidate1.name;\n      // const candidate1VoteCount = candidate1.votecount;\n\n      const candidate2 = await election.methods.candidates(2).call();\n      // const candidate2Id = candidate2.id;\n      // const candidate2Name = candidate2.name;\n      // const candidate2VoteCount = candidate2.votecount;\n      \n      setCandidate1(candidate1);\n      setCandidate2(candidate2);\n      setElectionSM(election);\n      setLoader(false);\n    }\n    else\n    {\n      window.alert(\"Smart contract is not deployed\");\n    }\n  }\n\n  const votecandidate = async (candidateId) => {\n    setLoader(true);\n    await electionSM.methods.Vote(candidateId).send({from : currentAccount}).on(\"transactionhash\",()=>{\n      console.log(\"Successfully Ran\");\n    });\n    setLoader(false);\n  };\n\n  if(loader)\n  {\n    return <div className=\"loader\"></div>\n  }\n\n  return (\n    <div>\n      <Navbar account={currentAccount}/>  {/* This is navbar from navbar.js. We are passing account from here to Navbar.js */}\n      <Body candidate1={candidate1} candidate2={candidate2} votecandidate={votecandidate} account={currentAccount}/>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}